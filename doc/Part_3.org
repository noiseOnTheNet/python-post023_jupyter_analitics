#+BLOG: noise on the net
#+POSTID: 639
#+DATE: [2025-02-01 sab 18:50]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Language learning
#+TAGS: Python
#+DESCRIPTION:
#+PROPERTY: header-args:python  :session *Python* :exports both :results value raw :return tabulate(df, headers=df.columns, tablefmt='orgtbl', floatfmt=".4g")
#+TITLE: Data: the final frontier

file:images/philipp-dusel--Mbfhs0u4YQ-unsplash.jpg

Photo by [[https://unsplash.com/@philipp_dice?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash][Philipp DÃ¼sel]] on [[https://unsplash.com/photos/the-night-sky-is-filled-with-stars-above-a-mountain-range--Mbfhs0u4YQ?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash][Unsplash]]

After [[https://noiseonthenet.space/noise/2025/01/a-trip-to-jupyter-lab/][heading onto Jupyter]] and [[https://noiseonthenet.space/noise/2025/01/meet-the-pandas/][meeting the Pandas]] let's boldly go where no one has gone before!

Here are some powerful tools to explore and discover new lifeforms into our data

<<174e59f6-c1c2-4009-bb09-b101c3f9e389>>
* Introduction to Exploratory Data Analysis with Matplotlib and Seaborn
:PROPERTIES:
:CUSTOM_ID: introduction-to-exploratory-data-analysis-with-matplotlib-and-seaborn
:END:
In this part we are going to focus on a
[[https://en.wikipedia.org/wiki/Exploratory_data_analysis][quick
exploration]] of the data, according to their type and number.

For simplicity we will talk about two main data kind:

- categorical: i.e., a finite list of discrete values which may or may
  not have a specific order e.g., =yellow=, =red=, =blue=
- continuous: i.e. numerical values (most often belonging to R) usually
  represented with a =float= computer type

Jupyter and pandas allow you to easily interact with the data and
perform operations and visualization.

<<e366fc1e-82cc-4124-81a3-1c34c2295d01>>
*** Installing basic libraries
:PROPERTIES:
:CUSTOM_ID: installing-basic-libraries
:END:
Execute the following cell only if you need to install the seaborn
library

#+begin_src bash :noeval :exports code
!pip install --upgrade matplotlib seaborn
#+end_src

<<3b0c5778-3e61-42b5-b00b-523e8f39b717>>
The following libraries are the foundation tools:

- *pandas* is an in-memory dataframe library
- *matplotlib* is a plotting library inspired by matlab plotting API
- *seaborn* is a chart library based on matplotlib, with more
  functionalities and themes
- *numpy* is a numeric calculation library providing fast c arrays and
  scientific functions

#+begin_src python :exports code
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from tabulate import tabulate
#+end_src

#+RESULTS:
| PassengerId | Survived |      Pclass |
|-------------+----------+-------------|
| count       |     1110 |        1110 |
| unique      |      nan |          13 |
| top         |      nan | Los Angeles |
| freq        |      nan |         458 |
| mean        |  0.00699 |         nan |
| std         | 0.008124 |         nan |
| min         |        0 |         nan |
| 25%         | 0.002863 |         nan |
| 50%         |  0.00444 |         nan |
| 75%         |    0.008 |         nan |
| max         |    0.101 |         nan |

<<178d4a95-08ff-4ef4-a383-dc9c693859eb>>
** Bird's eye view of a dataset with Describe
:PROPERTIES:
:CUSTOM_ID: birds-eye-view-of-a-dataset-with-describe
:END:
let's start with a classic dataset including the passengers of Titanic
ship.

The =read_csv= function uploads this format in a pandas =DataFrame=
which is a relation

Note: the titanic dataset was downloaded at the beginning of Part 2; in
case you missing it execute the code at the beginning of the lesson

The =.head()= method returns the first lines of your data frame to
quickly inspect it

#+begin_src python
titanic = pd.read_csv("datasets/titanic.csv")
df =titanic.head()[["Survived","Pclass","Age","Sex"]]
#+end_src

#+RESULTS:
| Survived |   Pclass |         Age |
|----------+----------+-------------|
| count    |     1110 |        1110 |
| unique   |      nan |          13 |
| top      |      nan | Los Angeles |
| freq     |      nan |         458 |
| mean     |  0.00699 |         nan |
| std      | 0.008124 |         nan |
| min      |        0 |         nan |
| 25%      | 0.002863 |         nan |
| 50%      |  0.00444 |         nan |
| 75%      |    0.008 |         nan |
| max      |    0.101 |         nan |

<<1810cb0c-c89d-4baa-afc2-ee4b5ea76d27>>
the =.describe()= method returns basic statistics for all numerical
columns

- min
- max
- median
- mean
- quartiles
- count of elements

by using the =.describe(include="all")= option also categorical values
are shown with some other statistics:

- number of unique discrete values
- the most common one
- its frequency

#+begin_src python
df =titanic.describe(include="all")[["Survived","Pclass","Age","Sex"]]
#+end_src

#+RESULTS:
| Survived |   Pclass |         Age |
|----------+----------+-------------|
| count    |     1110 |        1110 |
| unique   |      nan |          13 |
| top      |      nan | Los Angeles |
| freq     |      nan |         458 |
| mean     |  0.00699 |         nan |
| std      | 0.008124 |         nan |
| min      |        0 |         nan |
| 25%      | 0.002863 |         nan |
| 50%      |  0.00444 |         nan |
| 75%      |    0.008 |         nan |
| max      |    0.101 |         nan |


<<d8cf0c99-1303-40ae-8518-0c70d89cd08d>>
It is possible to access columns (called =Series= in pandas jargon)
using the square bracket operator

#+begin_src python :noeval :exports code
titanic["Pclass"]
#+end_src

columns whose name is a good python identifier (i.e. starts with a
letter and contains only letters, numbers and underscore) can be
accessed using the dot notation e.g.

#+begin_src python :noeval :exports code
titanic.Pclass
#+end_src

each column has a data type, as =csv= do not carry any type information,
this is inferred when loading; other binary data format also include a
data type. The datas type of a column is saved in the =.dtype= attribute

#+begin_src python :results raw output drawer
pclass = titanic.Pclass
print(pclass.dtype)
#+end_src

#+RESULTS:
:results:
int64
:end:

<<e71354c6-03ee-446a-9544-dd3d29d274e2>>
we know this column represents the class of the ticket so we expect it
to have a finite number of actual values: we can check it with the
=.unique()= method

#+begin_src python
df =pclass.unique()
#+end_src

#+RESULTS:

<<697e9569-5f02-428e-85a9-692dfc3d1d3b>>
we see this is a discrete valued columns so we can transform its type
with the =.astype()= method

#+begin_src python :results verbatim drawer
pclass = pclass.astype('category')
df =pclass.dtype
#+end_src

#+RESULTS:
:results:
:end:

<<686b3eb7-08a6-45ca-b3f5-c67224df2207>>
Now the statistics are represented differently for pClass

#+begin_src python
titanic["pClass"] = pclass
df =titanic.describe(include="all")[["Survived","Pclass","Age","Sex"]]
#+end_src

#+RESULTS:
| Survived |   Pclass |         Age |
|----------+----------+-------------|
| count    |     1110 |        1110 |
| unique   |      nan |          13 |
| top      |      nan | Los Angeles |
| freq     |      nan |         458 |
| mean     |  0.00699 |         nan |
| std      | 0.008124 |         nan |
| min      |        0 |         nan |
| 25%      | 0.002863 |         nan |
| 50%      |  0.00444 |         nan |
| 75%      |    0.008 |         nan |
| max      |    0.101 |         nan |

<<fb8f08df-2593-40a6-8126-0bb605496058>>
If we know in advance about the type of a column we can give some hint
to the csv reader

#+begin_src python :exports code :result output raw drawer
titanic = pd.read_csv(
    "datasets/titanic.csv",
    dtype={
        "Survived":"category",
        "Pclass":"category",
        "Sex":"category",
    }
)
#+end_src

#+RESULTS:
| Survived |   Pclass |         Age |
|----------+----------+-------------|
| count    |     1110 |        1110 |
| unique   |      nan |          13 |
| top      |      nan | Los Angeles |
| freq     |      nan |         458 |
| mean     |  0.00699 |         nan |
| std      | 0.008124 |         nan |
| min      |        0 |         nan |
| 25%      | 0.002863 |         nan |
| 50%      |  0.00444 |         nan |
| 75%      |    0.008 |         nan |
| max      |    0.101 |         nan |

<<999bce95-792e-4d9f-86c6-7f7b84976d1a>>
** Monovariate Categorical
:PROPERTIES:
:CUSTOM_ID: monovariate-categorical
:END:
When we have a category series we can list all of the possible values
using the =.cat.categories= attribute

#+begin_src python :results output verbatim drawer
print(pclass.cat.categories)
#+end_src

#+RESULTS:
:results:
Index([1, 2, 3], dtype='int64')
:end:

<<2a25f666-b716-44ab-bc4e-3013ed24fa8a>>
the =sns.countplot()= function show a bar plot of categorical values

#+begin_src python  :noeval
sns.countplot(pclass)
#+end_src

[[file:images/04c5f7ee20b7c943d81ff65e17f36eaf85fead2b.png]]

<<6f784e9f-8d3d-4389-9082-76c438b330a9>>
** Monovariate Continuous
:PROPERTIES:
:CUSTOM_ID: monovariate-continuous
:END:

<<af09454e-d7ce-4d3a-8434-4d7ecba9ecce>>
this dataframe collects pollutant density in California

#+begin_src python :results value
california = pd.read_csv("california_pb_2023.csv")
df =california.describe(include="all")[['Daily Mean Pb Concentration', 'County']]
#+end_src

#+RESULTS:
|        | Daily Mean Pb Concentration |      County |
|--------+-----------------------------+-------------|
| count  |                        1110 |        1110 |
| unique |                         nan |          13 |
| top    |                         nan | Los Angeles |
| freq   |                         nan |         458 |
| mean   |                     0.00699 |         nan |
| std    |                    0.008124 |         nan |
| min    |                           0 |         nan |
| 25%    |                    0.002863 |         nan |
| 50%    |                     0.00444 |         nan |
| 75%    |                       0.008 |         nan |
| max    |                       0.101 |         nan |

<<1616b9b6-febf-4e2a-b35e-82f36a409812>>
=sns.histplot= shows an histogram

#+begin_src python
sns.histplot(california,x="Daily Mean Pb Concentration")
#+end_src

#+RESULTS:
|        | Daily Mean Pb Concentration |      County |
|--------+-----------------------------+-------------|
| count  |                        1110 |        1110 |
| unique |                         nan |          13 |
| top    |                         nan | Los Angeles |
| freq   |                         nan |         458 |
| mean   |                     0.00699 |         nan |
| std    |                    0.008124 |         nan |
| min    |                           0 |         nan |
| 25%    |                    0.002863 |         nan |
| 50%    |                     0.00444 |         nan |
| 75%    |                       0.008 |         nan |
| max    |                       0.101 |         nan |

[[file:images/1e179c2227cfbdf703d241d0bb9385b826510526.png]]

<<e1810d7e-c3f8-422a-9658-3f5051fef51c>>
This distribution looks like a lognormal distribution, let's show a
cumulative distribution and plot it with a logaritmic x axis

#+begin_src python :noeval
sorted_pb = np.sort(california["Daily Mean Pb Concentration"])
prob_pb = (np.arange(len(sorted_pb)) + 1)/len(sorted_pb)
ax=sns.lineplot(x=sorted_pb, y=prob_pb)
ax.set_xscale("log", base=10)
#+end_src

[[file:images/98650be7328261cabcd95fd83a1dc52ecb101acd.png]]

<<832a06a7-cc15-4ca2-b4ad-be1f64d3bf9e>>
This looks nice so we can check by fitting a quantile plot

First we try with a normal quantile, we expect some queues

#+begin_src python :noeval
from scipy import stats
stats.probplot(california["Daily Mean Pb Concentration"], plot=sns.mpl.pyplot)
#+end_src

[[file:images/07b8d558d22557e09c33cc108a169772832e1531.png]]

<<d9f56ab0-3602-46d7-b29e-a4ea1e3a3425>>
We can fit it with a different distribution, so we choose a lognormal

#+begin_src python :noeval
stats.probplot(california["Daily Mean Pb Concentration"], plot=sns.mpl.pyplot,dist=stats.distributions.lognorm(s=1))
#+end_src

[[file:images/9cfc294ea181926dd8c3f3a056d94b07f48e2909.png]]

<<e87328ff-e68e-4a51-9adf-caf704ccffda>>
this looks quite better

<<362f1dca-31e2-47af-af13-475f5ba71113>>
** Multivariate Categorical
:PROPERTIES:
:CUSTOM_ID: multivariate-categorical
:END:
let's consider a group of categorical variables and explore their
interaction, the =pd.crosstab()= function provides a way to create a
contingency table i.e. a table which counts all combination of the
considered factors

#+begin_src python
titanic['survived'] = titanic.Survived.astype('category')
titanic['sex'] = titanic.Sex.astype('category')
titanic['pclass'] = titanic.Pclass.astype('category')
ct = pd.crosstab(titanic['survived'],columns=[titanic['sex'],titanic['pclass']])
df =ct
#+end_src

#+RESULTS:
| ('female', '1') | ('female', '2') | ('female', '3') |
|-----------------+-----------------+-----------------|
| count           |            1110 |            1110 |
| unique          |             nan |              13 |
| top             |             nan |     Los Angeles |
| freq            |             nan |             458 |
| mean            |         0.00699 |             nan |
| std             |        0.008124 |             nan |
| min             |               0 |             nan |
| 25%             |        0.002863 |             nan |
| 50%             |         0.00444 |             nan |
| 75%             |           0.008 |             nan |
| max             |           0.101 |             nan |

<<4894d57d-414c-4dc9-9c90-fefbf1e0ab44>>
the =.plot.bar()= method provides a quick way to display this
information as grouped bar plot

#+begin_src python :noeval
ct.plot.bar()
#+end_src

[[file:images/1d24d9251539adaf31f212d0a90dae8f08c90c42.png]]

#+begin_src python :noeval
ct.plot.bar(stacked=True)
#+end_src

[[file:images/6a211b5060db8a1a6052f4e092b775e7791ac988.png]]

<<de8f5789-43b6-44f5-8dc3-8ff4213d2dd0>>
** Multivariate Continuous
:PROPERTIES:
:CUSTOM_ID: multivariate-continuous
:END:
the =iris= dataset is a collection of measurements of this flower's
features (sepal and petal length and width) across different varieties.

#+begin_src python
iris = pd.read_csv("iris.csv")
df =iris.head()
#+end_src

#+RESULTS:
| sepal_length | sepal_width | petal_length |
|--------------+-------------+--------------|
| count        |        1110 |         1110 |
| unique       |         nan |           13 |
| top          |         nan |  Los Angeles |
| freq         |         nan |          458 |
| mean         |     0.00699 |          nan |
| std          |    0.008124 |          nan |
| min          |           0 |          nan |
| 25%          |    0.002863 |          nan |
| 50%          |     0.00444 |          nan |
| 75%          |       0.008 |          nan |
| max          |       0.101 |          nan |

<<10f681eb-5435-4699-963c-4c598ddfca1a>>
*** Two variables
:PROPERTIES:
:CUSTOM_ID: two-variables
:END:
the simplest way to look at the interaction between two of these
features is the scatter plot

#+begin_src python :noeval
sns.scatterplot(iris,x="sepal_length",y="sepal_width")
#+end_src

[[file:images/4c419a0ca12a4e26ba41985fdfac20af73b56257.png]]

<<9ccb70ec-4fcb-4d17-b275-409eb9c3587e>>
*** Many variables
:PROPERTIES:
:CUSTOM_ID: many-variables
:END:
the same can be done with all the features in a large simmetric matrix.

In the diagonal are plotted histograms of the corresponding feature

#+begin_src python :noeval
sns.pairplot(iris)
#+end_src

[[file:images/40e4e0e7a7353c852c5d91fb906062bb585cae19.png]]

<<9dd914be-1f4d-4b69-b821-2a39be97254f>>
** Multivariate Mixed
:PROPERTIES:
:CUSTOM_ID: multivariate-mixed
:END:

<<b23830a8-cd57-431d-9543-475b5f144a79>>
*** One continuous variable against a one categorical variable
:PROPERTIES:
:CUSTOM_ID: one-continuous-variable-against-a-one-categorical-variable
:END:
box plots present a graphical synopsis of distributions grouped by a
category

- the middle line represent the median
- the top and bottom line of the box represent the 25th and 75th
  percentiles od the distribution
- the top and bottom whiskers are usually calculated in this way:
  1. select the most extreme sample value
  2. calculate the interquartile range i.e. the distance between the
     25th and 75th percentiles
  3. multiply the interquartile range by 1.5 and sum to (or respectively
     subtract from) the median
  4. between the most extreme value and the value calculated at point 3
     choose the one which is nearest to the median
- if the calculated value is chosen all samples which are farther from
  the mean are plotted as dot and may be interpreted as outliers

#+begin_src python :noeval
sns.boxplot(titanic,x="pclass",y="Age")
#+end_src

[[file:images/ec07ee2fc870feb9b837a8e21ba0fac0069235ca.png]]

<<4b3c3233-ba97-454d-ae37-f9e1909be32c>>
violin plots also show a smooth curve representng a continuous
distribution calculated with kernel smoothing.

This provides more visual information than box plot but may be
effectively used only when the number of groups is limited

#+begin_src python :noeval
sns.violinplot(titanic,x="pclass",y="Age")
#+end_src

[[file:images/ffdee419bb3798d2d38b21cf42559025e5b59f8e.png]]

<<432cb3b0-1493-459e-a28a-2bbe6d08b414>>
*** Many continuous variables against one categorical variable
:PROPERTIES:
:CUSTOM_ID: many-continuous-variables-against-one-categorical-variable
:END:
the scatter matrix can show groups from a single category using colors

The seaborn version also shows kernel density distributons

#+begin_src python :noeval
sns.pairplot(iris,hue="variety")
#+end_src

[[file:images/d434a97f3c99b61d058aae62790fa73ea533b7b4.png]]

<<be6af749-a6ba-4276-8041-59114efc69fa>>
*** Many categorical variables against one or more continuous variables
:PROPERTIES:
:CUSTOM_ID: many-categorical-variables-against-one-or-more-continuous-variables
:END:
When dealing with multiple categorical variable is also possible to
define a bidimensional grid.

A plotting function can be applied on each subset represented in a given
cell grid

#+begin_src python :noeval
g = sns.FacetGrid(titanic, col="sex", row='pclass')
g.map(sns.histplot, "Age")
#+end_src

[[file:images/8a2ea5e8dd1009fa17e54573f5038253f725ff8d.png]]

<<d9a7489f-79a7-4af0-90b2-6faf94f0771c>>
interestingly this representation shows the different age distribution
as a function of the gender and the class of passengers

# images/04c5f7ee20b7c943d81ff65e17f36eaf85fead2b.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/04c5f7ee20b7c943d81ff65e17f36eaf85fead2b.png
# images/1e179c2227cfbdf703d241d0bb9385b826510526.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/1e179c2227cfbdf703d241d0bb9385b826510526.png
# images/98650be7328261cabcd95fd83a1dc52ecb101acd.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/98650be7328261cabcd95fd83a1dc52ecb101acd.png
# images/07b8d558d22557e09c33cc108a169772832e1531.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/07b8d558d22557e09c33cc108a169772832e1531.png
# images/9cfc294ea181926dd8c3f3a056d94b07f48e2909.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/9cfc294ea181926dd8c3f3a056d94b07f48e2909.png
# images/1d24d9251539adaf31f212d0a90dae8f08c90c42.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/1d24d9251539adaf31f212d0a90dae8f08c90c42.png
# images/6a211b5060db8a1a6052f4e092b775e7791ac988.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/6a211b5060db8a1a6052f4e092b775e7791ac988.png
# images/4c419a0ca12a4e26ba41985fdfac20af73b56257.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/4c419a0ca12a4e26ba41985fdfac20af73b56257.png
# images/40e4e0e7a7353c852c5d91fb906062bb585cae19.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/40e4e0e7a7353c852c5d91fb906062bb585cae19.png
# images/ec07ee2fc870feb9b837a8e21ba0fac0069235ca.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/ec07ee2fc870feb9b837a8e21ba0fac0069235ca.png
# images/ffdee419bb3798d2d38b21cf42559025e5b59f8e.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/ffdee419bb3798d2d38b21cf42559025e5b59f8e.png
# images/d434a97f3c99b61d058aae62790fa73ea533b7b4.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/d434a97f3c99b61d058aae62790fa73ea533b7b4.png
# images/8a2ea5e8dd1009fa17e54573f5038253f725ff8d.png https://noiseonthenet.space/noise/wp-content/uploads/2025/02/8a2ea5e8dd1009fa17e54573f5038253f725ff8d.png
